>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

>>> bg.integer_validator("unitest", 12)
>>> bg.integer_validator("width", 10)

>>> try:
...     bg.integer_validator("name", int(1.8))
... except Exception as e:
...     print(f"{e.__class__.__name__}: {e}")
>>> try:
...     bg = BaseGeometry(5)
... except Exception as e:
...     print(f"{e.__class__.__name__}: {e}")
TypeError: BaseGeometry() takes no arguments

>>> try:
...     bg.integer_validator("name", "John")
... except Exception as e:
...     print(f"{e.__class__.__name__}: {e}")
TypeError: name must be an integer

>>> try:
...     bg.integer_validator("name", -5)
... except Exception as e:
...     print(f"{e.__class__.__name__}: {e}")
ValueError: name must be greater than 0

>>> try:
...     bg.integer_validator("name", 0)
... except Exception as e:
...     print(f"{e.__class__.__name__}: {e}")
ValueError: name must be greater than 0

>>> try:
...     bg.integer_validator()
... except Exception as e:
...     print(f"{e.__class__.__name__}: {e}")
TypeError: BaseGeometry.integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> try:
...     bg.integer_validator("name")
... except Exception as e:
...     print(f"{e.__class__.__name__}: {e}")
TypeError: BaseGeometry.integer_validator() missing 1 required positional argument: 'value'

>>> try:
...     bg.integer_validator("name", [1])
... except Exception as e:
...     print(f"{e.__class__.__name__}: {e}")
TypeError: name must be an integer

>>> try:
...     bg.integer_validator("name", {1})
... except Exception as e:
...     print(f"{e.__class__.__name__}: {e}")
TypeError: name must be an integer

>>> try:
...     bg.integer_validator("name", 1.8)
... except Exception as e:
...     print(f"{e.__class__.__name__}: {e}")
TypeError: name must be an integer

>>
