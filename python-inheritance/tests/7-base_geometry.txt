>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

>>> bg = BaseGeometry()

>>> bg.integer_validator("height", 10)
>>> bg.integer_validator("width", 1)

>>> try:
...     bg.integer_validator("name", "string")
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] name must be an integer
>>> try:
...     bg.integer_validator("ratio", 3.14)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] ratio must be an integer
>>> try:
...     bg.integer_validator("items", [1, 2, 3])
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[TypeError] items must be an integer

>>> try:
...     bg.integer_validator("zero", 0)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[ValueError] zero must be greater than 0
>>> try:
...     bg.integer_validator("negative", -10)
... except Exception as e:
...     print(f"[{e.__class__.__name__}] {e}")
[ValueError] negative must be greater than 0

>>> try:
...     bg.area()
... except Exception as e:
...     print(e)
area() is not implemented

>>> isinstance(bg, BaseGeometry)
True

>>> bg = BaseGeometry()
>>> isinstance(bg, BaseGeometry)
True

>>> bg.integer_validator("height", None)
Traceback (most recent call last):
TypeError: height must be an integer

>>> bg.integer_validator("age", (4,))
Traceback (most recent call last):
TypeError: age must be an integer

>>> bg.integer_validator("age", {"key": "value"})
Traceback (most recent call last):
TypeError: age must be an integer

>>> hasattr(bg, "area") and hasattr(bg, "integer_validator")
True

>>> bg.integer_validator("age", True)

>>> import sys
>>> bg = BaseGeometry()
>>> bg.integer_validator("big_value", sys.maxsize)

